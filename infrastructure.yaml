Transform: AWS::Serverless-2016-10-31

Globals:
  Function:
    Runtime: python3.8

Parameters:
  Stage:
    Type: String
    Description: The stage to deploy into.
    Default: dev
  
  GoogleClientId:
    Type: String
    Description: Google client id
    NoEcho: true
  
  GoogleClientSecret:
    Type: String
    Description: Google client secret
    NoEcho: true

Mappings:
  Route53:
    abol-tabol:
      HostedZoneId: Z0173847221KGU6HSM1O8
  DomainInfo:
    prizebondapi:
      DomainName: prizebondapi.abol-tabol.com
      DomainCertificate: arn:aws:acm:us-east-1:664020862805:certificate/ae4896aa-fc45-4096-a6e2-26d8b74e7b94

Resources:
  LambdaLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: python-packages/
      Description: Python requirements for lambda functions

  PrizebondUserPool:
    Type: AWS::Cognito::UserPool
    Properties: 
      UserPoolName:
        Fn::Sub: PrizebondUserPool-${Stage}
  
  PrizebondUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties: 
      AllowedOAuthFlows: 
        - implicit
      AllowedOAuthScopes: 
        - phone
        - email
        - openid
        - aws.cognito.signin.user.admin
        - profile
      CallbackURLs: 
        - https://prizebondchecker.mahbubalam.dev/login
        - https://localhost:3000/login
      ClientName: PrizebondApp
      LogoutURLs: 
        - https://prizebondchecker.mahbubalam.dev
        - https://localhost:3000
      UserPoolId:
        Ref: PrizebondUserPool

  GoogleIdentityProvider:
    Type: AWS::Cognito::UserPoolIdentityProvider
    Properties:
      UserPoolId: !Ref PrizebondUserPool
      ProviderName: Google
      ProviderDetails:
        client_id: !Ref GoogleClientId
        client_secret: !Ref GoogleClientSecret
        authorize_scopes: profile email openid
      ProviderType: Google
      AttributeMapping:
        email: email
        phoneNumbers: phone_number
        name: name
        picture: picture
        sub: username

  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      Cors:
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
        AllowMethods: "'*'"
        AllowOrigin: "'*'"
      Auth:
        Authorizers:
          CongintoAuth:
            AuthorizationScopes:
              - email
              - profile
              - openid
            UserPoolArn:
              Fn::GetAtt: [PrizebondUserPool, Arn]
            AuthType: COGNITO_USER_POOLS
        DefaultAuthorizer: CongintoAuth
        AddDefaultAuthorizerToCorsPreflight: false
      Domain:
        DomainName: !FindInMap [DomainInfo, prizebondapi, DomainName]
        CertificateArn: !FindInMap [DomainInfo, prizebondapi, DomainCertificate]
        EndpointConfiguration: REGIONAL
        Route53:
          HostedZoneId: !FindInMap [Route53, abol-tabol, HostedZoneId]
      EndpointConfiguration: REGIONAL
      BinaryMediaTypes:
        - multipart/form-data
      StageName:
        Ref: Stage
      Cors:
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
        AllowMethods: "'*'"
        AllowOrigin: "'*'"

  ApiLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: main.handler
      CodeUri: app/
      Timeout: 60
      MemorySize: 128
      Layers:
        - Ref: LambdaLayer
      Policies:
        - Version: '2012-10-17' 
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:PutItem
                - dynamodb:Query
                - dynamodb:DeleteItem
                - dynamodb:BatchWriteItem
              Resource:
                Fn::GetAtt:
                  - PrizeBondsTable
                  - Arn
      Environment:
        Variables:
          STAGE:
            Ref: Stage
          PRIZE_BOND_TABLE:
            Ref: PrizeBondsTable
      Events:
        ApiEventRoot:
          Type: Api
          Properties:
            Path: /
            Method: ANY
            RestApiId:
              Ref: ApiGatewayApi
        ApiEvent:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: ANY
            RestApiId:
              Ref: ApiGatewayApi

  PrizeBondsTable: 
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - 
          AttributeName: Username
          AttributeType: S
        - 
          AttributeName: BondNumber
          AttributeType: S
     
      KeySchema: 
        - 
          AttributeName: Username
          KeyType: HASH
        - 
          AttributeName: BondNumber
          KeyType: RANGE
        
      ProvisionedThroughput: 
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

Outputs:
  ApiUrl:
    Description: The regional domain to access the API
    Value:
      Fn::Sub: 'https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com'
